# moex_stock_bot.py

import matplotlib
matplotlib.use('Agg')  # –í–∫–ª—é—á–∞–µ–º "–±–µ–∑–≥–æ–ª–æ–≤—ã–π" —Ä–µ–∂–∏–º –¥–ª—è matplotlib
import requests
import pandas as pd
import numpy as np
import os  # ‚Üê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É, –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
import matplotlib.pyplot as plt
from datetime import datetime
from scipy.signal import argrelextrema
import asyncio

# –ó–∞–º–µ–Ω—è–µ–º telegram –Ω–∞ —É—Å–ª–æ–≤–Ω—ã–π –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
except ModuleNotFoundError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-telegram-bot' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    Update = None
    ApplicationBuilder = None
    CommandHandler = None
    CallbackQueryHandler = None
    ContextTypes = None

SECTORS = {
    "–§–∏–Ω–∞–Ω—Å—ã": ["T", "LEAS", "CARM", "ZAYM", "MBNK", "SBERP", "MOEX", "RENI", "BSPB", "SVCB", "VTBR", "SBER", "CBOM"],
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑": ["BANE", "TATN", "RNFT", "BANEP", "NVTK", "LKOH", "ROSN", "TATNP", "GAZP", "SNGS", "SNGSP"],
    "–ú–µ—Ç–∞–ª–ª—ã –∏ –¥–æ–±—ã—á–∞": ["TRMK", "MTLRP", "AMEZ", "ROLO", "RUAL", "VSMO", "LNZL", "RASP", "ALRS", "GMKN", "SELG", "PLZL", "UGLD", "MTLR", "MAGN", "NLMK", "CHMF"],
    "IT": ["CNRU", "YDEX", "DATA", "HEAD", "IVAT", "DELI", "WUSH", "POSI", "VKCO", "ASTR", "DIAS", "SOFL"],
    "–¢–µ–ª–µ–∫–æ–º": ["NSVZ", "RTKMP", "VEON-RX", "TTLK", "MGTSP", "MTSS", "RTKM"],
    "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏": ["ETLN", "SMLT", "LSRG", "PIKK"],
    "–†–∏—Ç–µ–π–ª": ["VSEH", "EUTR", "KROT", "ABRD", "GCHE", "AQUA", "HNFG", "FIXP", "BELU", "LENT", "OKEY", "OZON", "MVID", "MGNT"],
    "–≠–ª–µ–∫—Ç—Ä–æ": ["HYDR", "DVEC", "TGKA", "TGKN", "TGKB", "LSNG", "MSNG", "ELFV", "IRAO", "UPRO", "MSRS", "MRKZ", "MRKU", "MRKC", "MRKP", "FEES"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": ["TRNFP", "AFLT", "FESH", "NMTP", "FLOT"],
    "–ê–≥—Ä–æ": ["KZOS", "NKNC", "UFOSP", "KAZT", "AKRN", "NKHP", "PHOR"],
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": ["OZPH", "PRMD", "GECO", "APTK", "LIFE", "ABIO", "GEMC"],
    "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ": ["IRKT", "ZILLP", "UWGN", "SVAV", "KMAZ", "UNAC"]
}

TICKERS_PER_PAGE = 5

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MOEX

def get_moex_data(ticker="SBER", days=100):
    till = datetime.today().strftime('%Y-%m-%d')
    from_date = (datetime.today() - pd.Timedelta(days=days * 1.5)).strftime('%Y-%m-%d')
    url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json?interval=24&from={from_date}&till={till}"
    r = requests.get(url)
    data = r.json()
    candles = data['candles']['data']
    columns = data['candles']['columns']
    df = pd.DataFrame(candles, columns=columns)
    df['begin'] = pd.to_datetime(df['begin'])
    df.set_index('begin', inplace=True)
    df = df.rename(columns={'close': 'CLOSE', 'volume': 'VOLUME'})
    df = df[['CLOSE', 'VOLUME']].dropna()
    return df.tail(days)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI –≤—Ä—É—á–Ω—É—é

def compute_rsi(series, window=14):
    if len(series) < window:
        return pd.Series([np.nan] * len(series), index=series.index)
    delta = series.diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = pd.Series(gain, index=series.index).rolling(window=window).mean()
    avg_loss = pd.Series(loss, index=series.index).rolling(window=window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.round(0)

# RSI –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã

def analyze_indicators(df):
    df['RSI'] = compute_rsi(df['CLOSE'], window=14)
    df['Volume_Mean'] = df['VOLUME'].rolling(window=10).mean()
    df['Anomaly'] = df['VOLUME'] > 1.5 * df['Volume_Mean']
    df['Volume_Multiplier'] = df['VOLUME'] / df['Volume_Mean']
    df['EMA9'] = df['CLOSE'].ewm(span=9, adjust=False).mean()
    df['EMA20'] = df['CLOSE'].ewm(span=20, adjust=False).mean()
    df['EMA50'] = df['CLOSE'].ewm(span=50, adjust=False).mean()
    df['EMA100'] = df['CLOSE'].ewm(span=100, adjust=False).mean()
    df['EMA200'] = df['CLOSE'].ewm(span=200, adjust=False).mean()
    return df

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ

def find_levels(df):
    levels = []
    closes = df['CLOSE'].values
    indexes = np.arange(len(closes))
    local_max = argrelextrema(closes, np.greater)[0]
    local_min = argrelextrema(closes, np.less)[0]

    extrema = sorted([(i, closes[i]) for i in np.concatenate((local_max, local_min))], key=lambda x: x[1])
    if len(extrema) > 0:
        grouped = pd.Series([round(p[1], 1) for p in extrema]).value_counts()
        strong_levels = grouped[grouped > 1].index.tolist()
        for level in strong_levels:
            for i, val in extrema:
                if abs(val - level) < 0.5:
                    levels.append((df.index[i], val))
                    break
    return levels

# –î–≤–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ –∏ –¥–Ω–æ

def detect_double_patterns(df):
    closes = df['CLOSE'].values
    patterns = []
    for i in range(2, len(closes) - 2):
        if closes[i-2] < closes[i-1] < closes[i] and closes[i] > closes[i+1] > closes[i+2]:
            patterns.append(('Double Top', df.index[i], closes[i]))
        if closes[i-2] > closes[i-1] > closes[i] and closes[i] < closes[i+1] < closes[i+2]:
            patterns.append(('Double Bottom', df.index[i], closes[i]))
    return patterns

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

def plot_stock(df, ticker, levels=[], patterns=[]):
    plt.figure(figsize=(12, 6))
    plt.plot(df.index, df['CLOSE'], label='–¶–µ–Ω–∞')

    plt.plot(df.index, df['EMA9'], label='EMA9', linestyle='--', alpha=0.7)
    plt.plot(df.index, df['EMA20'], label='EMA20', linestyle='--', alpha=0.7)
    plt.plot(df.index, df['EMA50'], label='EMA50', linestyle='--', alpha=0.7)
    plt.plot(df.index, df['EMA100'], label='EMA100', linestyle='--', alpha=0.7)  # EMA100
    plt.plot(df.index, df['EMA200'], label='EMA200', linestyle='--', alpha=0.7)  # EMA200

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã
  # plt.bar(df.index, df['VOLUME'], width=0.8, color='gray', alpha=0.3, label="–û–±—ä–µ–º")
    
    for idx in df[df['Anomaly']].index:
        volume_ratio = df.loc[idx, 'Volume_Multiplier']
        plt.scatter(idx, df.loc[idx, 'CLOSE'], color='red')
        plt.text(idx, df.loc[idx, 'CLOSE'], f"{volume_ratio:.1f}x", color='red', fontsize=8, ha='left')

    for date, price in levels:
        plt.axhline(price, linestyle='--', alpha=0.3)

    plotted_top = False
    plotted_bottom = False
    for name, date, price in patterns:
        if name == 'Double Top':
            marker = '^'
            color = 'red'
            label = 'Double Top' if not plotted_top else None
            plotted_top = True
        else:
            marker = 'v'
            color = 'green'
            label = 'Double Bottom' if not plotted_bottom else None
            plotted_bottom = True
        plt.scatter(date, price, label=label, s=100, marker=marker, color=color)

    plt.title(f"{ticker}: –ì—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    filename = f"{ticker}_analysis.png"
    plt.savefig(filename)
    plt.close()
    return filename

# Telegram –∫–æ–º–∞–Ω–¥–∞

if Update and ContextTypes:
    async def a(update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton(sector, callback_data=f"sector:{sector}:0")] for sector in SECTORS]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        if data == "back_to_sectors":
            keyboard = [[InlineKeyboardButton(sector, callback_data=f"sector:{sector}:0")] for sector in SECTORS]
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif data.startswith("sector:"):
            _, sector, page = data.split(":")
            page = int(page)
            tickers = SECTORS.get(sector, [])
            start = page * TICKERS_PER_PAGE
            end = start + TICKERS_PER_PAGE
            visible = tickers[start:end]
            keyboard = [[InlineKeyboardButton(t, callback_data=f"ticker:{t}")] for t in visible]
            nav = []
            if start > 0:
                nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"sector:{sector}:{page-1}"))
            if end < len(tickers):
                nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"sector:{sector}:{page+1}"))
            if nav:
                keyboard.append(nav)
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—Ä–∞—Å–ª—è–º", callback_data="back_to_sectors")])
            await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç—Ä–∞—Å–ª—å: {sector}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif data.startswith("ticker:"):
            ticker = data.split(":", 1)[1]
            await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–∫–µ—Ä: {ticker}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")
            df = get_moex_data(ticker)
            df = analyze_indicators(df)
            levels = find_levels(df)
            patterns = detect_double_patterns(df)
            chart = plot_stock(df, ticker, levels, patterns)
            rsi_series = df['RSI'].dropna()
            rsi_value = rsi_series.iloc[-1] if not rsi_series.empty else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI"
            latest_date = df.index.max().strftime('%Y-%m-%d')
            text_summary = f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π RSI: {rsi_value}\n–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –¥–æ {latest_date}\n"
            await context.bot.send_photo(chat_id=query.message.chat.id, photo=open(chart, 'rb'))
            await context.bot.send_message(chat_id=query.message.chat.id, text=text_summary)

   #     if patterns:
    #        text_summary += "\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
     #       for p in patterns:
      #          text_summary += f"- {p[0]} –Ω–∞ {p[1].date()} –ø–æ —Ü–µ–Ω–µ {p[2]:.2f}\n"



        async def all(update: Update, context: ContextTypes.DEFAULT_TYPE):
        for ticker in sum(SECTORS.values(), []):
            try:
                df = get_moex_data(ticker)
                df = analyze_indicators(df)
                levels = find_levels(df)
                patterns = detect_double_patterns(df)
                chart = plot_stock(df, ticker, levels, patterns)
                rsi_series = df['RSI'].dropna()
                rsi_value = rsi_series.iloc[-1] if not rsi_series.empty else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI"
                latest_date = df.index.max().strftime('%Y-%m-%d')
                text_summary = f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π RSI: {rsi_value}\n–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –¥–æ {latest_date}\n"
                

           #     if patterns:
            #        text_summary += "\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
             #       for p in patterns:
              #          text_summary += f"- {p[0]} –Ω–∞ {p[1].date()} –ø–æ —Ü–µ–Ω–µ {p[2]:.2f}\n"

                await update.message.reply_photo(photo=open(chart, 'rb'))
                await update.message.reply_text(f"{ticker}\n{text_summary}")
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker}: {e}")
                continue

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ç–æ –±–æ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã @TradeAnsh –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π –ú–æ—Å–±–∏—Ä–∂–∏.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/a <—Ç–∏–∫–µ—Ä> ‚Äî –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /a SBER)\n"
            "/all ‚Äî –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫ –ú–æ—Å–±–∏—Ä–∂–∏\n\n"
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n"
            "SBER, GAZP, LKOH, GMKN, ROSN, TATN, YDEX"
        )
        await update.message.reply_text(text)





# ==== Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã 24/7 ====
from flask import Flask
from threading import Thread

app_web = Flask('')

@app_web.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app_web.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ==== –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º ====
if ApplicationBuilder:
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if TOKEN is None:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        keep_alive()  # ‚Üê –∑–∞–ø—É—Å–∫ Flask
        app = ApplicationBuilder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("a", a))
        app.add_handler(CommandHandler("all", all))
        app.add_handler(CallbackQueryHandler(handle_callback))
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Flask-—Å–µ—Ä–≤–µ—Ä–æ–º.")
        app.run_polling()
else:
    print("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Telegram-–±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ 'telegram'.")
