# main.py (moex_stock_bot.py —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)

import matplotlib
matplotlib.use('Agg')  # –í–∫–ª—é—á–∞–µ–º "–±–µ–∑–≥–æ–ª–æ–≤—ã–π" —Ä–µ–∂–∏–º –¥–ª—è matplotlib
import requests
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.signal import argrelextrema
import asyncio
import html

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
try:
    import caching  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∏—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("‚úÖ –ú–æ–¥—É–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ÑπÔ∏è –ú–æ–¥—É–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∞")

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¢–æ–∫–µ–Ω–∞ Tinkoff
from tinkoff.invest import Client, CandleInterval

TINKOFF_API_TOKEN = os.getenv("TINKOFF_API_TOKEN")
client = Client(TINKOFF_API_TOKEN)

def set_webhook():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    webhook_url = f"https://moex-telegram-bot-sra8.onrender.com/"

    response = requests.get(
        f"https://api.telegram.org/bot{token}/setWebhook",
        params={"url": webhook_url}
    )

    if response.status_code == 200:
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")

if __name__ == "__main__":
    set_webhook()

# Telegram –∏–º–ø–æ—Ä—Ç—ã
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
except ModuleNotFoundError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-telegram-bot' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    Update = None
    ApplicationBuilder = None
    CommandHandler = None
    CallbackQueryHandler = None
    ContextTypes = None

# –°–µ–∫—Ç–æ—Ä—ã –∞–∫—Ü–∏–π
SECTORS = {
    "–§–∏–Ω–∞–Ω—Å—ã": ["SBER", "T", "VTBR", "MOEX", "SPBE", "RENI", "BSPB", "SVCB", "MBNK", "LEAS", "SFIN", "AFKS", "CARM", "ZAYM", "MGKL"],
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑": ["GAZP", "NVTK", "LKOH", "ROSN", "TATNP", "TATN", "SNGS", "SNGSP", "BANE", "BANEP", "RNFT"],
    "–ú–µ—Ç–∞–ª–ª—ã –∏ –¥–æ–±—ã—á–∞": ["ALRS", "GMKN", "RUAL", "TRMK", "MAGN", "NLMK", "CHMF", "MTLRP", "MTLR", "RASP", "PLZL", "UGLD", "SGZH"],
    "IT": ["YDEX", "DATA", "HEAD", "POSI", "VKCO", "ASTR", "IVAT", "DELI", "WUSH", "CNRU", "DIAS", "SOFL", "ELMT"],
    "–¢–µ–ª–µ–∫–æ–º": ["MTSS", "RTKMP", "RTKM", "MGTSP"],
    "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏": ["SMLT", "PIKK", "LSRG"],
    "–†–∏—Ç–µ–π–ª": ["X5", "MGNT", "LENT", "BELU", "OZON", "EUTR", "ABRD", "GCHE", "AQUA", "HNFG", "MVID", "VSEH"],
    "–≠–ª–µ–∫—Ç—Ä–æ": ["IRAO", "UPRO", "LSNGP", "MSRS", "MRKU", "MRKC", "MRKP", "FEES", "HYDR", "ELFV"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": ["TRNFP", "AFLT", "FESH", "NMTP", "FLOT"],
    "–ê–≥—Ä–æ": ["PHOR", "RAGR", "KZOS", "AKRN", "NKHP"],
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": ["MDMG", "OZPH", "PRMD", "ABIO", "GEMC"],
    "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ": ["UWGN", "SVAV", "KMAZ", "UNAC", "IRKT"]
}

SECTORS1 = {
    "–§–∏–Ω–∞–Ω—Å—ã": ["SBER", "T", "VTBR", "MOEX", "SPBE", "RENI", "BSPB", "SVCB", "MBNK", "LEAS", "SFIN", "AFKS"],
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑": ["GAZP", "NVTK", "LKOH", "ROSN", "TATNP", "TATN", "SNGS", "SNGSP", "BANE", "BANEP", "RNFT"],
    "–ú–µ—Ç–∞–ª–ª—ã –∏ –¥–æ–±—ã—á–∞": ["ALRS", "GMKN", "RUAL", "TRMK", "MAGN", "NLMK", "CHMF", "MTLRP", "MTLR", "PLZL", "SGZH"],
    "IT": ["YDEX", "DATA", "HEAD", "POSI", "VKCO", "ASTR", "DELI", "WUSH", "CNRU", "DIAS"],
    "–¢–µ–ª–µ–∫–æ–º": ["MTSS", "RTKMP", "RTKM"],
    "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏": ["SMLT", "PIKK"],
    "–†–∏—Ç–µ–π–ª": ["X5", "MGNT", "LENT", "BELU", "OZON", "EUTR", "ABRD", "GCHE", "AQUA", "HNFG", "MVID"],
    "–≠–ª–µ–∫—Ç—Ä–æ": ["IRAO", "UPRO", "LSNGP", "MRKP"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": ["TRNFP", "AFLT", "FESH", "NMTP", "FLOT"],
    "–ê–≥—Ä–æ": ["PHOR", "RAGR"],
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": ["MDMG", "OZPH", "PRMD"],
    "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ": ["UWGN", "SVAV"]
}

TICKERS_PER_PAGE = 10

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
ASK_DAYS = 1
ASK_TICKER = 2
ASK_DELTA_DAYS = 3

# === –§–£–ù–ö–¶–ò–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===

def get_moex_data(ticker="SBER", days=120):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å MOEX"""
    try:
        till = datetime.today().strftime('%Y-%m-%d')
        from_date = (datetime.today() - pd.Timedelta(days=days * 1.5)).strftime('%Y-%m-%d')
        url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json?interval=24&from={from_date}&till={till}"
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        candles = data['candles']['data']
        columns = data['candles']['columns']
        df = pd.DataFrame(candles, columns=columns)
        df['begin'] = pd.to_datetime(df['begin'])
        df = df.sort_values('begin')
        df.set_index('begin', inplace=True)
        df = df.rename(columns={
            'close': 'close',
            'volume': 'volume',
            'high': 'high',
            'low': 'low'
        })
        df = df[['close', 'volume', 'high', 'low']].dropna()
        return df.tail(days)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
        return pd.DataFrame()

def get_moex_weekly_data(ticker="SBER", weeks=80):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å MOEX"""
    try:
        till = datetime.today().strftime('%Y-%m-%d')
        from_date = (datetime.today() - pd.Timedelta(weeks=weeks * 1.5)).strftime('%Y-%m-%d')
        url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json?interval=7&from={from_date}&till={till}"
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        candles = data['candles']['data']
        columns = data['candles']['columns']
        df = pd.DataFrame(candles, columns=columns)
        df['begin'] = pd.to_datetime(df['begin'])
        df = df.sort_values('begin')
        df.set_index('begin', inplace=True)
        df = df.rename(columns={'close': 'close'})
        df = df[['close']].dropna()
        return df.tail(weeks)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
        return pd.DataFrame()

def get_figi_by_ticker(ticker: str) -> str | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É"""
    try:
        with Client(TINKOFF_API_TOKEN) as client:
            instruments = client.instruments.shares().instruments
            for instr in instruments:
                if instr.ticker == ticker:
                    return instr.figi
        print(f"FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {ticker} –≤ TQBR")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ FIGI –¥–ª—è {ticker}: {e}")
        return None

def get_moex_data_4h_tinkoff(ticker: str = "SBER", days: int = 25) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç 4H —Å–≤–µ—á–∏ –ø–æ —Ç–∏–∫–µ—Ä—É –∏–∑ Tinkoff Invest API"""
    try:
        figi = get_figi_by_ticker(ticker)
        if figi is None:
            print(f"‚ùå FIGI –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return pd.DataFrame()
            
        print(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º FIGI {figi} –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {ticker}")
        
        to_dt = datetime.utcnow()
        from_dt = to_dt - timedelta(days=days)
        
        with Client(TINKOFF_API_TOKEN) as client:
            candles_response = client.market_data.get_candles(
                figi=figi,
                from_=from_dt,
                to=to_dt,
                interval=CandleInterval.CANDLE_INTERVAL_4_HOUR,
            )
            
        import time
        time.sleep(0.1)  # 100–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            
        if not candles_response.candles:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {ticker}")
            return pd.DataFrame()
        
        data = []
        for c in candles_response.candles:
            try:
                open_p = c.open.units + c.open.nano / 1e9
                high_p = c.high.units + c.high.nano / 1e9
                low_p = c.low.units + c.low.nano / 1e9
                close_p = c.close.units + c.close.nano / 1e9
                volume = c.volume
                timestamp = pd.to_datetime(c.time)
                
                data.append({
                    "time": timestamp,
                    "open": open_p,
                    "high": high_p,
                    "low": low_p,
                    "close": close_p,
                    "volume": volume
                })
            except Exception as candle_e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ –¥–ª—è {ticker}: {candle_e}")
                continue
                
        if not data:
            print(f"‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
            return pd.DataFrame()
            
        df = pd.DataFrame(data)
        df["time"] = pd.to_datetime(df["time"])
        df = df.set_index("time").sort_index()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
        if df.index.tz is None:
            df.index = df.index.tz_localize('UTC')
        df.index = df.index.tz_convert('Europe/Moscow')
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {ticker}")
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
        return pd.DataFrame()

# === –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===

def compute_rsi(series, window=14):
    """–í—ã—á–∏—Å–ª—è–µ—Ç RSI –∏—Å–ø–æ–ª—å–∑—É—è pandas ewm –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è Wilder's"""
    if len(series) < window + 1:
        return pd.Series([np.nan] * len(series), index=series.index)
    
    delta = series.diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    
    gain_series = pd.Series(gain, index=series.index)
    loss_series = pd.Series(loss, index=series.index)
    
    alpha = 1.0 / window
    avg_gain = gain_series.ewm(alpha=alpha, adjust=False).mean()
    avg_loss = loss_series.ewm(alpha=alpha, adjust=False).mean()
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    rsi = rsi.replace([np.inf, -np.inf], np.nan)
    return rsi.round(0)

def calculate_money_ad(df):
    """–†–∞—Å—á–µ—Ç Money A/D –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    df = df.copy()
    df['TYP'] = (df['high'] + df['low'] + df['close']) / 3
    df['CLV'] = ((df['close'] - df['low']) - (df['high'] - df['close'])) / (df['high'] - df['low'])
    df['CLV'] = df['CLV'].fillna(0)
    df['money_flow'] = df['CLV'] * df['volume'] * df['TYP']
    df['money_ad'] = df['money_flow'].cumsum()
    return df

def analyze_indicators(df):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    if df.empty:
        return df
    
    df['RSI'] = compute_rsi(df['close'], window=14)
    df['Volume_Mean'] = df['volume'].rolling(window=10).mean()
    df['Anomaly'] = df['volume'] > 1.5 * df['Volume_Mean']
    df['Volume_Multiplier'] = df['volume'] / df['Volume_Mean']
    df['EMA9'] = df['close'].ewm(span=9, adjust=False).mean()
    df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()
    df['EMA50'] = df['close'].ewm(span=50, adjust=False).mean()
    df['EMA100'] = df['close'].ewm(span=100, adjust=False).mean()
    df['EMA200'] = df['close'].ewm(span=200, adjust=False).mean()
    return df

# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ü–ê–¢–¢–ï–†–ù–û–í ===

def find_levels(df):
    """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    if df.empty:
        return []
    
    levels = []
    closes = df['close'].values
    local_max = argrelextrema(closes, np.greater)[0]
    local_min = argrelextrema(closes, np.less)[0]

    extrema = sorted([(i, closes[i]) for i in np.concatenate((local_max, local_min))], key=lambda x: x[1])
    if len(extrema) > 0:
        grouped = pd.Series([round(p[1], 1) for p in extrema]).value_counts()
        strong_levels = grouped[grouped > 1].index.tolist()
        for level in strong_levels:
            for i, val in extrema:
                if abs(val - level) < 0.5:
                    levels.append((df.index[i], val))
                    break
    return levels

def detect_double_patterns(df):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –∏ –¥–Ω–∞"""
    if df.empty or len(df) < 5:
        return []
    
    closes = df['close'].values
    patterns = []
    for i in range(2, len(closes) - 2):
        if closes[i-2] < closes[i-1] < closes[i] and closes[i] > closes[i+1] > closes[i+2]:
            patterns.append(('Double Top', df.index[i], closes[i]))
        if closes[i-2] > closes[i-1] > closes[i] and closes[i] < closes[i+1] < closes[i+2]:
            patterns.append(('Double Bottom', df.index[i], closes[i]))
    return patterns

# === –§–£–ù–ö–¶–ò–ò –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í ===

def plot_stock(df, ticker, levels=[], patterns=[]):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ü–∏–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    if df.empty:
        return None
    
    try:
        plt.figure(figsize=(12, 6))
        plt.plot(df.index, df['close'], label='–¶–µ–Ω–∞', color='blue')

        plt.plot(df.index, df['EMA9'], label='EMA9', linestyle='--', alpha=0.7)
        plt.plot(df.index, df['EMA20'], label='EMA20', linestyle='--', alpha=0.7)
        plt.plot(df.index, df['EMA50'], label='EMA50', linestyle='--', alpha=0.7)
        plt.plot(df.index, df['EMA100'], label='EMA100', linestyle='--', alpha=0.7)
        plt.plot(df.index, df['EMA200'], label='EMA200', linestyle='--', alpha=0.7)

        # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã
        for idx in df[df['Anomaly']].index:
            volume_ratio = df.loc[idx, 'Volume_Multiplier']
            plt.scatter(idx, df.loc[idx, 'close'], color='red')
            plt.text(idx, df.loc[idx, 'close'], f"{volume_ratio:.1f}x", color='red', fontsize=8, ha='left')

        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        for date, price in levels:
            plt.axhline(price, linestyle='--', alpha=0.3)

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        plotted_top = False
        plotted_bottom = False
        for name, date, price in patterns:
            if name == 'Double Top':
                marker = '^'
                color = 'red'
                label = 'Double Top' if not plotted_top else None
                plotted_top = True
            else:
                marker = 'v'
                color = 'green'
                label = 'Double Bottom' if not plotted_bottom else None
                plotted_bottom = True
            plt.scatter(date, price, label=label, s=100, marker=marker, color=color)

        plt.title(f"{ticker}: –ì—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        filename = f"{ticker}_analysis.png"
        plt.savefig(filename)
        plt.close()
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {ticker}: {e}")
        plt.close()
        return None

def plot_stan_chart(df, ticker):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É –í–∞–π–Ω—à—Ç–µ–π–Ω–∞"""
    if df.empty:
        return None
    
    try:
        df['SMA30'] = df['close'].rolling(window=30).mean()
        df['Upper'] = df['SMA30'] + 2 * df['close'].rolling(window=30).std()
        df['Lower'] = df['SMA30'] - 2 * df['close'].rolling(window=30).std()

        plt.figure(figsize=(12, 6))
        plt.plot(df.index, df['close'], label='–¶–µ–Ω–∞', color='blue')
        plt.plot(df.index, df['SMA30'], label='SMA 30', linewidth=2.5, color='black')
        plt.plot(df.index, df['Upper'], label='BB –≤–µ—Ä—Ö', linestyle='--', color='gray')
        plt.plot(df.index, df['Lower'], label='BB –Ω–∏–∑', linestyle='--', color='gray')

        plt.title(f"–í–∞–π–Ω—à—Ç–µ–π–Ω: {ticker} –Ω–∞ 1W –¢–§")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        filename = f"{ticker}_stan.png"
        plt.savefig(filename)
        plt.close()
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {ticker}: {e}")
        plt.close()
        return None

# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô ===

def find_sma30_crossover(ticker, days=7):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ SMA30"""
    try:
        df = get_moex_data(ticker, days=60)
        if df.empty or len(df) < 35:
            return None

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É
        filter_turnover_series = df['volume'].iloc[-10:] * df['close'].iloc[-10:]
        filter_avg_turnover = filter_turnover_series.mean()
        
        if filter_avg_turnover < 50_000_000:
            return None

        df['SMA30'] = df['close'].rolling(window=30).mean()
        
        current_close = df['close'].iloc[-1]
        current_sma30 = df['SMA30'].iloc[-1]
        
        if current_close <= current_sma30:
            return None

        recent_df = df.tail(days + 1)
        crossover_date = None
        
        for i in range(1, len(recent_df)):
            prev_close = recent_df['close'].iloc[i-1]
            curr_close = recent_df['close'].iloc[i]
            prev_sma = recent_df['SMA30'].iloc[i-1]
            curr_sma = recent_df['SMA30'].iloc[i]
            
            if (prev_close < prev_sma and curr_close > curr_sma):
                crossover_date = recent_df.index[i]
                break
        
        return crossover_date
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA30 –¥–ª—è {ticker}: {e}")
        return None

def find_sma30_crossover_short(ticker, days=7):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ —á–µ—Ä–µ–∑ SMA30"""
    try:
        df = get_moex_data(ticker, days=60)
        if df.empty or len(df) < 35:
            return None

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É
        filter_turnover_series = df['volume'].iloc[-10:] * df['close'].iloc[-10:]
        filter_avg_turnover = filter_turnover_series.mean()
        
        if filter_avg_turnover < 50_000_000:
            return None

        df['SMA30'] = df['close'].rolling(window=30).mean()
        
        current_close = df['close'].iloc[-1]
        current_sma30 = df['SMA30'].iloc[-1]
        
        if current_close >= current_sma30:
            return None

        recent_df = df.tail(days + 1)
        crossover_date = None
        
        for i in range(1, len(recent_df)):
            prev_close = recent_df['close'].iloc[i-1]
            curr_close = recent_df['close'].iloc[i]
            prev_sma = recent_df['SMA30'].iloc[i-1]
            curr_sma = recent_df['SMA30'].iloc[i]
            
            if (prev_close > prev_sma and curr_close < curr_sma):
                crossover_date = recent_df.index[i]
                break
        
        return crossover_date
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA30 –¥–ª—è {ticker}: {e}")
        return None

def find_sma30_crossover_week(ticker, weeks=5):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ SMA30 –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º –¢–§"""
    try:
        df = get_moex_weekly_data(ticker, weeks=60)
        if df.empty or len(df) < 35:
            return None

        dfd = get_moex_data(ticker, days=20)
        if dfd.empty or len(dfd) < 15:
            return None

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É
        filter_turnover_series = dfd['volume'].iloc[-10:] * dfd['close'].iloc[-10:]
        filter_avg_turnover = filter_turnover_series.mean()
        
        if filter_avg_turnover < 50_000_000:
            return None

        df['SMA30'] = df['close'].rolling(window=30).mean()
        
        current_close = df['close'].iloc[-1]
        current_sma30 = df['SMA30'].iloc[-1]
        
        if current_close <= current_sma30:
            return None

        recent_df = df.tail(weeks + 1)
        crossover_date = None
        
        for i in range(1, len(recent_df)):
            prev_close = recent_df['close'].iloc[i-1]
            curr_close = recent_df['close'].iloc[i]
            prev_sma = recent_df['SMA30'].iloc[i-1]
            curr_sma = recent_df['SMA30'].iloc[i]
            
            if (prev_close < prev_sma and curr_close > curr_sma):
                crossover_date = recent_df.index[i]
                break
        
        return crossover_date
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA30 –¥–ª—è {ticker}: {e}")
        return None

# === TELEGRAM –ö–û–ú–ê–ù–î–´ ===

if Update and ContextTypes:
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    def get_cache_stats():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω"""
        try:
            if 'caching' in globals():
                return caching.get_cache_stats()
            else:
                return {'entries': 0, 'size_mb': 0, 'status': 'disabled'}
        except:
            return {'entries': 0, 'size_mb': 0, 'status': 'error'}

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = get_cache_stats()
        
        if cache_stats.get('status') == 'disabled':
            cache_info = "üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
        elif cache_stats.get('status') == 'error':
            cache_info = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        else:
            cache_info = f"üìä –ö—ç—à: {cache_stats.get('entries', 0)} –∑–∞–ø–∏—Å–µ–π, {cache_stats.get('size_mb', 0)} MB\n"
        
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã @TradeAnsh –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π –ú–æ—Å–±–∏—Ä–∂–∏.\n"
            f"{cache_info}"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/chart_hv ‚Äî –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
            "/stan ‚Äî –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ –ø–æ –º–µ—Ç–æ–¥—É –°—Ç—ç–Ω–∞ –í–∞–π–Ω—à—Ç–µ–π–Ω–∞\n"
            "/cross_ema20x50 ‚Äî –∞–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º EMA 20x50 –Ω–∞ 1D\n"
            "/cross_ema20x50_4h ‚Äî –∞–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º EMA 20x50 –Ω–∞ 4H\n"
            "/stan_recent ‚Äî –∞–∫—Ü–∏–∏ —Å –ª–æ–Ω–≥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º SMA30 –Ω–∞ 1D\n"
            "/stan_recent_short ‚Äî –∞–∫—Ü–∏–∏ —Å —à–æ—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º SMA30 –Ω–∞ 1D\n"
            "/stan_recent_week ‚Äî –∞–∫—Ü–∏–∏ —Å –ª–æ–Ω–≥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º SMA30 –Ω–∞ 1W\n"
            "/moneyflow - –¢–æ–ø –ø–æ —Ä–æ—Å—Ç—É –∏ –æ—Ç—Ç–æ–∫—É –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (Money A/D)\n"
            "/high_volume - –ê–∫—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º\n"
            "/delta ‚Äî —Ä–∞—Å—á–µ—Ç –¥–µ–ª—å—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏\n"
            "/rsi_top ‚Äî –¢–æ–ø 10 –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –ø–æ RSI\n"
        )
        await update.message.reply_text(text)

    # –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async def ask_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ª—å—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
        return ASK_DAYS

    async def receive_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            days = int(update.message.text)
            if not (1 <= days <= 100):
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
                return ASK_DAYS

            context.user_data['days'] = days
            await long_moneyflow(update, context)
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10")
            return ASK_DAYS

    async def ask_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤) –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER):")
        return ASK_TICKER

    async def receive_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
        ticker_input = update.message.text.strip().upper()
        
        if not ticker_input:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return ASK_TICKER
        
        context.user_data['delta_ticker'] = ticker_input
        await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–µ–ª—å—Ç—É (1‚Äì100):")
        return ASK_DELTA_DAYS

    async def receive_delta_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            days = int(update.message.text)
            if not (1 <= days <= 100):
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
                return ASK_DELTA_DAYS

            ticker_input = context.user_data['delta_ticker']
            tickers = [t.strip().upper() for t in ticker_input.split(",") if t.strip()]

            if not tickers:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–∫–µ—Ä—ã.")
                return ConversationHandler.END

            await update.message.reply_text(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ {days} –¥–Ω–µ–π...")
            
            for ticker in tickers:
                await calculate_single_delta(update, context, ticker, days)
                await asyncio.sleep(0.5)
            
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10")
            return ASK_DELTA_DAYS

    async def calculate_single_delta(update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str, days: int):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–ª—å—Ç—É –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏"""
        await update.message.reply_text(f"üîç –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–µ–ª—å—Ç—É –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è {ticker} –∑–∞ {days} –¥–Ω–µ–π...")
        
        try:
            df = get_moex_data(ticker, days=100)
            if df.empty or len(df) < days + 1:
                await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")
                return

            df = calculate_money_ad(df)

            ad_start = df['money_ad'].iloc[-(days+1)]
            ad_end = df['money_ad'].iloc[-1]
            ad_delta = ad_end - ad_start

            price_start = df['close'].iloc[-(days+1)]
            price_end = df['close'].iloc[-1]
            date_start = df.index[-(days+1)].strftime('%d.%m.%y')
            date_end = df.index[-1].strftime('%d.%m.%y')
            
            price_delta = price_end - price_start
            price_pct = 100 * price_delta / price_start

            # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä–æ—Ç—É
            filter_turnover_series = df['volume'].iloc[-10:] * df['close'].iloc[-10:]
            filter_avg_turnover = filter_turnover_series.mean()
            
            # –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
            turnover_series = df['volume'].iloc[-days:] * df['close'].iloc[-days:]
            avg_turnover = turnover_series.mean()

            # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–æ—Ä–æ—Ç
            today_volume = df['volume'].iloc[-1]
            today_close = df['close'].iloc[-1]
            today_turnover = today_volume * today_close
            
            ratio = today_turnover / avg_turnover if avg_turnover > 0 else 0

            # EMA20/EMA50 Daily
            df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()
            df['EMA50'] = df['close'].ewm(span=50, adjust=False).mean()
            
            current_ema20 = df['EMA20'].iloc[-1]
            current_ema50 = df['EMA50'].iloc[-1]
            current_price = df['close'].iloc[-1]
            
            ema20x50_long = (current_ema20 > current_ema50) and (current_price > current_ema20)
            ema20x50_short = (current_ema20 < current_ema50) and (current_price < current_ema20)

            price_change_day = (current_price / df['close'].iloc[-2] - 1) if len(df) > 1 else 0

            # SMA30 Weekly
            try:
                wdf = get_moex_weekly_data(ticker, weeks=80)
                if len(wdf) >= 30:
                    wdf['SMA30'] = wdf['close'].rolling(window=30).mean()
                    weekly_sma30 = wdf['SMA30'].iloc[-1]
                    weekly_price = wdf['close'].iloc[-1]
                    price_above_sma30 = weekly_price > weekly_sma30 if pd.notna(weekly_sma30) else False
                else:
                    price_above_sma30 = False
            except:
                price_above_sma30 = False
            
            if avg_turnover != 0:
                delta_pct = 100 * ad_delta / avg_turnover
            else:
                delta_pct = 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = f"üìä *–ê–Ω–∞–ª–∏–∑ –¥–µ–ª—å—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è {ticker}*\n"
            msg += f"üìÖ *–ü–µ—Ä–∏–æ–¥: {date_start} ‚Äì {date_end} ({days} –¥–Ω–µ–π)*\n\n"
            
            if filter_avg_turnover < 50_000_000:
                msg += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç (< 50 –º–ª–Ω ‚ÇΩ)*\n\n"

            if ema20x50_long:
                ema_icon = "üü¢"
            elif ema20x50_short:
                ema_icon = "üî¥"
            else:
                ema_icon = "‚ö´"

            sma_icon = "üü¢" if price_above_sma30 else "üî¥"
            flow_icon = "üü¢" if ad_delta > 0 else "üî¥"
            
            msg += f"*Œî –¶–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:* {price_pct:+.1f}%\n"
            msg += f"*Œî –ü–æ—Ç–æ–∫–∞:* {ad_delta/1_000_000:+.0f} –º–ª–Ω ‚ÇΩ {flow_icon}   *Œî / –û–±–æ—Ä–æ—Ç:* {delta_pct:.1f}%\n"
            msg += f"*Œî –¶–µ–Ω—ã 1D:* {price_change_day*100:+.1f}%   *–û–±—ä—ë–º:* {ratio:.1f}x\n"
            msg += f"*EMA20x50:* {ema_icon}   *SMA30:* {sma_icon}\n\n"
            msg += f"üí∞ *–°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç:* {avg_turnover/1_000_000:.1f} –º–ª–Ω ‚ÇΩ\n"
            
            await update.message.reply_text(msg, parse_mode="Markdown")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–µ–ª—å—Ç—ã –¥–ª—è {ticker}: {str(e)}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞
    async def chart_hv(update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton(sector, callback_data=f"sector:{sector}:0")] for sector in SECTORS]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def stan(update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton(sector, callback_data=f"stan_sector:{sector}:0")] for sector in SECTORS]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –®—Ç–µ–π–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def high_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üîç –ò—â—É –∞–∫—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –æ–±—ä—ë–º–æ–º‚Ä¶")
        rows = []
        
        for ticker in sum(SECTORS.values(), []):
            try:
                df = get_moex_data(ticker, days=100)
                if df.empty or len(df) < 60: 
                    continue
                    
                # –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ –∑–∞ 10 –¥–Ω–µ–π
                volume_series = df['volume'].iloc[-11:-1]
                close_series = df['close'].iloc[-11:-1]
                turnover_series = volume_series * close_series
                avg_turnover = turnover_series.mean()
                
                # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–æ—Ä–æ—Ç
                today_volume = df['volume'].iloc[-1]
                today_close = df['close'].iloc[-1]
                today_turnover = today_volume * today_close
                
                ratio = today_turnover / avg_turnover if avg_turnover > 0 else 0
                
                if ratio < 1.2:
                    continue
                    
                # EMA20/EMA50 Daily
                df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()
                df['EMA50'] = df['close'].ewm(span=50, adjust=False).mean()
                
                current_ema20 = df['EMA20'].iloc[-1]
                current_ema50 = df['EMA50'].iloc[-1]
                current_price = df['close'].iloc[-1]
                
                ema20x50_long = (current_ema20 > current_ema50) and (current_price > current_ema20)
                
                price_change = (current_price / df['close'].iloc[-2] - 1) if len(df) > 1 else 0
                
                # SMA30 Weekly
                try:
                    wdf = get_moex_weekly_data(ticker, weeks=80)
                    if len(wdf) >= 30:
                        wdf['SMA30'] = wdf['close'].rolling(window=30).mean()
                        weekly_sma30 = wdf['SMA30'].iloc[-1]
                        weekly_price = wdf['close'].iloc[-1]
                        price_above_sma30 = weekly_price > weekly_sma30 if pd.notna(weekly_sma30) else False
                    else:
                        price_above_sma30 = False
                except:
                    price_above_sma30 = False

                # Money Flow A/D
                money_df = calculate_money_ad(df)
                ad_delta = money_df['money_ad'].iloc[-1] - money_df['money_ad'].iloc[-11]
                money_flow_icon = "üü¢" if ad_delta > 0 else "üî¥"
                money_flow_str = f"{ad_delta/1_000_000:+.0f}M"
                
                rows.append((
                    ticker, 
                    current_price, 
                    price_change, 
                    ratio, 
                    ema20x50_long, 
                    price_above_sma30,
                    money_flow_icon,
                    money_flow_str
                ))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
                continue
        
        rows.sort(key=lambda x: x[3], reverse=True)
        rows = rows[:15]
        
        if not rows:
            await update.message.reply_text("üìä –ê–∫—Ü–∏–π —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –æ–±—ä—ë–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        msg = "üìä <b>–ê–∫—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –æ–±—ä—ë–º–æ–º</b>\n\n"
        msg += "<pre>"
        msg += f"{'–¢–∏–∫–µ—Ä':<6} {'–¶–µ–Ω–∞':>8} {'Œî –¶–µ–Ω—ã':>7} {'–û–±—ä—ë–º':>6} {'ema20x50':>6} {'sma30':>6} {'Œî –ü–æ—Ç–æ–∫–∞':>10}\n"
        msg += "-" * 60 + "\n"
        
        for ticker, price, delta, ratio, ema_signal, sma_signal, mf_icon, mf_str in rows:
            ema_icon = "üü¢" if ema_signal else "üî¥"
            sma_icon = "üü¢" if sma_signal else "üî¥"
            
            msg += f"{ticker:<6} {price:>8.2f} {delta*100:>6.1f}% {ratio:>5.1f}x {ema_icon:>6} {sma_icon:>4} {mf_icon}{mf_str:>6}\n"
        
        msg += "</pre>\n\n"
        msg += "<i>EMA - –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA20x50 (D) –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –¢–§</i>\n"
        msg += "<i>SMA - —Ü–µ–Ω–∞ –≤—ã—à–µ SMA30 –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º –¢–§</i>\n"
        msg += "<i>Œî –ü–æ—Ç–æ–∫–∞ - –ø—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–ø–æ—Å–ª. 10 –¥–Ω–µ–π)</i>"
        
        await update.message.reply_text(msg, parse_mode="HTML")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (cross_ema20x50, cross_ema20x50_4h, long_moneyflow, rsi_top –∏ —Ç.–¥.)
    # ... [–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞]

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data

        try:
            if data == "back_to_sectors":
                keyboard = [[InlineKeyboardButton(sector, callback_data=f"sector:{sector}:0")] for sector in SECTORS]
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

            elif data.startswith("sector:"):
                _, sector, page = data.split(":")
                page = int(page)
                tickers = SECTORS.get(sector, [])
                start = page * TICKERS_PER_PAGE
                end = start + TICKERS_PER_PAGE
                visible = tickers[start:end]

                keyboard = [[InlineKeyboardButton(t, callback_data=f"ticker:{t}")] for t in visible]
                nav = []
                if start > 0:
                    nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"sector:{sector}:{page-1}"))
                if end < len(tickers):
                    nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"sector:{sector}:{page+1}"))
                if nav:
                    keyboard.append(nav)
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—Ä–∞—Å–ª—è–º", callback_data="back_to_sectors")])

                await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç—Ä–∞—Å–ª—å: {sector}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

            elif data.startswith("ticker:"):
                ticker = data.split(":", 1)[1]
                await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–∫–µ—Ä: {ticker}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")

                df = get_moex_data(ticker)
                if df.empty:
                    await context.bot.send_message(chat_id=query.message.chat.id, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}")
                    return

                df = analyze_indicators(df)
                levels = find_levels(df)
                patterns = detect_double_patterns(df)
                chart = plot_stock(df, ticker, levels, patterns)
                
                if chart is None:
                    await context.bot.send_message(chat_id=query.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {ticker}")
                    return

                rsi_series = df['RSI'].dropna()
                rsi_value = rsi_series.iloc[-1] if not rsi_series.empty else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI"
                latest_date = df.index.max().strftime('%Y-%m-%d')

                text_summary = f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π RSI: {rsi_value}\n"
                text_summary += f"–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –¥–æ {latest_date}\n"

                with open(chart, 'rb') as photo:
                    await context.bot.send_photo(chat_id=query.message.chat.id, photo=photo)
                await context.bot.send_message(chat_id=query.message.chat.id, text=text_summary)
                
                if os.path.exists(chart):
                    os.remove(chart)

        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        exit()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("chart_hv", chart_hv))
    app.add_handler(CommandHandler("stan", stan))
    app.add_handler(CommandHandler("high_volume", high_volume))
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –•–µ–Ω–¥–ª–µ—Ä—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
    delta_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("delta", ask_ticker)],
        states={
            ASK_TICKER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_ticker)],
            ASK_DELTA_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_delta_days)]
        },
        fallbacks=[],
    )
    app.add_handler(delta_conv_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("moneyflow", ask_days)],
        states={
            ASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_days)]
        },
        fallbacks=[],
    )
    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ —Å Webhook
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook...")

    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        url_path=TOKEN, 
        webhook_url=f"https://moex-telegram-bot-sra8.onrender.com/{TOKEN}"
    )
