from telegram import Update
from telegram.ext import ContextTypes
import pandas as pd
import logging
from typing import List, Tuple

from bot.utils.decorators import telegram_handler, fast_telegram_handler, typing_action, performance_monitor
from data.optimized_moex_client import optimized_moex_client
from analysis.indicators import analyze_indicators
from config.sectors import get_all_tickers, get_sector_tickers
from data.cache import cache
from bot.services.delta_analysis import calculate_single_delta, delta_analyzer

logger = logging.getLogger(__name__)

@fast_telegram_handler
@typing_action
async def start_optimized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start - –±—ã—Å—Ç—Ä–∞—è, –±–µ–∑ rate limiting
    """
    text = (
        "üöÄ **MOEX Bot 2.0** - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
        "**–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/scan_fast ‚Äî –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-–∞–∫—Ü–∏–π\n"
        "/cache_stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞\n"
        "/performance ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
        
        "**–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:**\n"
        "/rsi_top ‚Äî RSI –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)\n"
        "/volume_scan ‚Äî –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤\n"
        "/delta_scan ‚Äî –î–µ–ª—å—Ç–∞-—Å–∏–≥–Ω–∞–ª—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞\n"
        "/ema_signals ‚Äî –°–∏–≥–Ω–∞–ª—ã –ø–æ EMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º\n\n"
        
        "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "/clear_cache ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à\n"
        "/warm_cache ‚Äî –ü—Ä–æ–≥—Ä–µ—Ç—å –∫—ç—à –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π\n\n"
        
        "‚ú® –£–ª—É—á—à–µ–Ω–∏—è: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, rate limiting"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

@fast_telegram_handler
async def cache_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_stats = cache.get_cache_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MOEX –∫–ª–∏–µ–Ω—Ç–∞
        client_stats = optimized_moex_client.get_performance_stats()
        
        message = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**\n\n"
            
            "**–ö—ç—à:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {cache_stats['total_requests']}\n"
            f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {cache_stats['hits']}\n"
            f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {cache_stats['misses']}\n"
            f"‚Ä¢ Hit Rate: {cache_stats['hit_rate']}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_stats['memory_cache_size']} –∑–∞–ø–∏—Å–µ–π\n\n"
            
            "**MOEX API:**\n"
            f"‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {client_stats['api_calls']}\n"
            f"‚Ä¢ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {client_stats['cache_hits']}\n"
            f"‚Ä¢ Hit Rate: {client_stats['cache_hit_rate']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API: {client_stats['avg_api_response_time']}\n"
            f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è API: {client_stats['total_api_time']}\n"
        )
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error getting cache stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@telegram_handler
@typing_action
@performance_monitor("scan_fast")
async def scan_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã - —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    popular_tickers = [
        "SBER", "GAZP", "LKOH", "YDEX", "MGNT", "ROSN", 
        "NVTK", "VTBR", "ALRS", "MTSS", "MOEX", "PIKK"
    ]
    
    message = await update.message.reply_text("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–±—É–¥—É—Ç –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        data_dict = optimized_moex_client.get_multiple_daily_data(popular_tickers, days=50)
        
        results = []
        for ticker, df in data_dict.items():
            if df.empty:
                continue
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = analyze_indicators(df)
            
            current_price = df['close'].iloc[-1]
            rsi = df['RSI'].iloc[-1] if 'RSI' in df.columns and pd.notna(df['RSI'].iloc[-1]) else None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ EMA
            signal = "üìä"
            if 'EMA20' in df.columns and 'EMA50' in df.columns:
                ema20 = df['EMA20'].iloc[-1]
                ema50 = df['EMA50'].iloc[-1]
                
                if current_price > ema20 > ema50:
                    signal = "üü¢"  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                elif current_price < ema20 < ema50:
                    signal = "üî¥"  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                elif ema20 > current_price > ema50:
                    signal = "üü°"  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ —Ç—Ä–µ–Ω–¥–µ
            
            # –ê–Ω–∞–ª–∏–∑ RSI
            rsi_signal = ""
            if rsi:
                if rsi > 70:
                    rsi_signal = "üî•"  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                elif rsi < 30:
                    rsi_signal = "‚ùÑÔ∏è"   # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            
            results.append({
                'ticker': ticker,
                'price': current_price,
                'rsi': rsi,
                'signal': signal,
                'rsi_signal': rsi_signal
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        results.sort(key=lambda x: (x['signal'] == "üü¢", x['rsi'] or 50), reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üöÄ **–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ** (—Ç–æ–ø-12 –∞–∫—Ü–∏–π)\n\n"
        
        for item in results[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-8
            rsi_text = f"RSI:{item['rsi']:.0f}" if item['rsi'] else "RSI:N/A"
            response += f"{item['signal']}{item['rsi_signal']} **{item['ticker']}**: {item['price']:.2f} | {rsi_text}\n"
        
        response += "\nüü¢ - –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö | üî¥ - –¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑ | üü° - –ö–æ—Ä—Ä–µ–∫—Ü–∏—è\n"
        response += "üî• - –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å | ‚ùÑÔ∏è - –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        
        await message.edit_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in scan_fast: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä—ã–Ω–∫–∞")

@telegram_handler
@typing_action
@performance_monitor("rsi_top_optimized")
async def rsi_top_optimized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ RSI —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    """
    message = await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é RSI –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ü–∏–π... (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
    
    try:
        tickers = get_all_tickers()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_size = 25
        batches = [tickers[i:i + batch_size] for i in range(0, len(tickers), batch_size)]
        
        overbought = []
        oversold = []
        processed_count = 0
        
        for i, batch in enumerate(batches):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 2 == 0:  # –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –±–∞—Ç—á
                progress = f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(tickers)} –∞–∫—Ü–∏–π..."
                await message.edit_text(progress)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞ (–∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à)
            data_dict = optimized_moex_client.get_multiple_daily_data(batch, days=30)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º RSI
            for ticker, df in data_dict.items():
                if df.empty:
                    continue
                
                try:
                    df = analyze_indicators(df)
                    rsi = df['RSI'].iloc[-1]
                    
                    if pd.notna(rsi):
                        if rsi > 70:
                            overbought.append((ticker, rsi))
                        elif rsi < 30:
                            oversold.append((ticker, rsi))
                            
                    processed_count += 1
                    
                except Exception as e:
                    logger.warning(f"Error processing RSI for {ticker}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        overbought.sort(key=lambda x: x[1], reverse=True)
        oversold.sort(key=lambda x: x[1])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üìä **RSI –ê–Ω–∞–ª–∏–∑** ({processed_count} –∞–∫—Ü–∏–π)\n\n"
        
        if overbought:
            response += "üî¥ **–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ (RSI > 70):**\n"
            for ticker, rsi in overbought[:10]:
                response += f"‚Ä¢ **{ticker}**: {rsi:.0f}\n"
        
        if oversold:
            response += "\nüü¢ **–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ (RSI < 30):**\n"
            for ticker, rsi in oversold[:10]:
                response += f"‚Ä¢ **{ticker}**: {rsi:.0f}\n"
        
        if not overbought and not oversold:
            response += "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ü–∏–π –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö RSI"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cache_stats = cache.get_cache_stats()
        response += f"\nüìà Cache Hit Rate: {cache_stats['hit_rate']}"
        
        await message.edit_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in rsi_top_optimized: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ RSI")

@telegram_handler
async def warm_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π"""
    message = await update.message.reply_text("üî• –ü—Ä–æ–≥—Ä–µ–≤–∞—é –∫—ç—à...")
    
    try:
        popular_tickers = [
            "SBER", "GAZP", "LKOH", "YDEX", "MGNT", "ROSN", 
            "NVTK", "VTBR", "ALRS", "MTSS", "MOEX", "PIKK",
            "T", "NLMK", "CHMF", "PHOR", "RUAL", "GMKN"
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ñ–æ–Ω–µ
        optimized_moex_client.warm_up_cache(popular_tickers)
        
        await message.edit_text(
            f"‚úÖ –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç –¥–ª—è {len(popular_tickers)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π\n"
            "–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ!"
        )
        
    except Exception as e:
        logger.error(f"Error warming cache: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞")

@telegram_handler
async def clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    try:
        cache.clear_all()
        
        await update.message.reply_text(
            "üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω!\n"
            "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
        )
        
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞")

@telegram_handler
@typing_action
async def volume_scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤"""
    message = await update.message.reply_text("üîç –ò—â—É –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        scan_tickers = [
            "SBER", "GAZP", "LKOH", "YDEX", "MGNT", "ROSN", "NVTK", "VTBR", 
            "ALRS", "MTSS", "MOEX", "PIKK", "T", "NLMK", "CHMF", "PHOR",
            "RUAL", "GMKN", "TATN", "SNGS"
        ]
        
        data_dict = optimized_moex_client.get_multiple_daily_data(scan_tickers, days=20)
        
        volume_alerts = []
        
        for ticker, df in data_dict.items():
            if df.empty:
                continue
                
            try:
                df = analyze_indicators(df)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
                recent_anomalies = df[df['Anomaly']].tail(3)
                
                if not recent_anomalies.empty:
                    latest_anomaly = recent_anomalies.iloc[-1]
                    volume_multiplier = latest_anomaly['Volume_Multiplier']
                    price = latest_anomaly['close']
                    date = latest_anomaly.name.strftime('%Y-%m-%d')
                    
                    volume_alerts.append({
                        'ticker': ticker,
                        'multiplier': volume_multiplier,
                        'price': price,
                        'date': date
                    })
                    
            except Exception as e:
                logger.warning(f"Error processing volume for {ticker}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é –æ–±—ä–µ–º–∞
        volume_alerts.sort(key=lambda x: x['multiplier'], reverse=True)
        
        response = "üîç **–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)\n\n"
        
        if volume_alerts:
            for alert in volume_alerts[:10]:
                response += f"üìä **{alert['ticker']}**: {alert['multiplier']:.1f}x –æ–±—ä–µ–º\n"
                response += f"   –¶–µ–Ω–∞: {alert['price']:.2f} | {alert['date']}\n\n"
        else:
            response += "‚ÑπÔ∏è –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        await message.edit_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in volume_scan: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä–µ–º–æ–≤")

@telegram_handler
@typing_action
async def delta_scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ª—å—Ç–∞-—Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –ø–æ—Ç–æ–∫—É"""
    message = await update.message.reply_text("üîç –ò—â—É —Å–∏–≥–Ω–∞–ª—ã –ø–æ –¥–µ–ª—å—Ç–µ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scan_tickers = [
            "SBER", "GAZP", "LKOH", "YDEX", "MGNT", "ROSN", "NVTK", "VTBR", 
            "ALRS", "MTSS", "MOEX", "PIKK", "T", "NLMK", "CHMF", "PHOR",
            "RUAL", "GMKN", "TATN", "SNGS", "X5", "OZON"
        ]
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞ 10 –¥–Ω–µ–π
        opportunities = delta_analyzer.scan_delta_opportunities(scan_tickers, days=10)
        
        response = "üí∞ **–î–µ–ª—å—Ç–∞-—Å–∏–≥–Ω–∞–ª—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞** (10 –¥–Ω–µ–π)\n\n"
        
        if opportunities:
            response += "üü¢ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            response += "`–¢–∏–∫–µ—Ä  Œî%   –ü–æ—Ç–æ–∫ –º–ª–Ω  EMA  SMA30W`\n"
            
            for opp in opportunities[:8]:  # –¢–æ–ø-8 —Å–∏–≥–Ω–∞–ª–æ–≤
                ema_signal = "üü¢" if opp['ema20x50_long'] else "üî¥"
                sma_signal = "üü¢" if opp['price_above_sma30_weekly'] else "üî¥"
                
                response += f"`{opp['ticker']:<6} {opp['price_change_pct']:>4.1f}% {opp['ad_delta_millions']:>8.0f}    {ema_signal}   {sma_signal}`\n"
            
            response += "\nüü¢ - –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª | üî¥ - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª\n"
            response += "EMA - —Ç—Ä–µ–Ω–¥ EMA20x50 | SMA30W - –ø–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SMA30 –Ω–µ–¥–µ–ª—å–Ω–æ–π"
        else:
            response += "‚ÑπÔ∏è –°–∏–ª—å–Ω—ã—Ö –¥–µ–ª—å—Ç–∞-—Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            response += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delta –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"
        
        await message.edit_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in delta_scan: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ª—å—Ç–∞-—Å–∏–≥–Ω–∞–ª–æ–≤")