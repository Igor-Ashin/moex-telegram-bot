import functools
import logging
import time
from typing import Callable, Dict, List
from collections import defaultdict
import asyncio
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class RateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, max_requests: int = 10, window: int = 60):
        self.max_requests = max_requests
        self.window = window
        self.requests: Dict[int, List[float]] = defaultdict(list)
        self._cleanup_task = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        asyncio.create_task(self._cleanup_old_requests())
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        user_requests = self.requests[user_id]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
        self.requests[user_id] = [
            req_time for req_time in user_requests 
            if now - req_time < self.window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(now)
        return True
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        now = time.time()
        user_requests = self.requests[user_id]
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        recent_requests = [
            req_time for req_time in user_requests 
            if now - req_time < self.window
        ]
        
        return {
            'requests_in_window': len(recent_requests),
            'max_requests': self.max_requests,
            'window_seconds': self.window,
            'remaining_requests': max(0, self.max_requests - len(recent_requests)),
            'reset_time': max(recent_requests) + self.window if recent_requests else now
        }
    
    async def _cleanup_old_requests(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        while True:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                now = time.time()
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                for user_id in list(self.requests.keys()):
                    self.requests[user_id] = [
                        req_time for req_time in self.requests[user_id]
                        if now - req_time < self.window * 2  # –î–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ —á—É—Ç—å –¥–æ–ª—å—à–µ
                    ]
                    
                    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    if not self.requests[user_id]:
                        del self.requests[user_id]
                        
                logger.debug(f"Cleaned up rate limiter, active users: {len(self.requests)}")
                
            except Exception as e:
                logger.error(f"Error in rate limiter cleanup: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter(max_requests=15, window=60)  # 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

def rate_limit(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not rate_limiter.is_allowed(user_id):
            stats = rate_limiter.get_user_stats(user_id)
            
            await update.message.reply_text(
                f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                f"–õ–∏–º–∏—Ç: {stats['max_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {stats['window_seconds']} —Å–µ–∫—É–Ω–¥\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {stats['window_seconds']} —Å–µ–∫—É–Ω–¥"
            )
            logger.warning(f"Rate limit exceeded for user {user_id}")
            return
        
        return await func(update, context, *args, **kwargs)
    
    return wrapper

def handle_errors(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}", exc_info=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ - —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "timeout" in str(e).lower():
                error_message = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. MOEX API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            elif "connection" in str(e).lower():
                error_message = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            elif "json" in str(e).lower():
                error_message = "üìä –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä."
            
            try:
                await update.message.reply_text(error_message)
            except:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å
                logger.error("Failed to send error message to user")
    
    return wrapper

def log_command(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        command = func.__name__
        start_time = time.time()
        
        logger.info(f"Command '{command}' started by user {user_id} ({username})")
        
        try:
            result = await func(update, context, *args, **kwargs)
            
            duration = time.time() - start_time
            logger.info(f"Command '{command}' completed for user {user_id} in {duration:.3f}s")
            
            return result
            
        except Exception as e:
            duration = time.time() - start_time
            logger.error(f"Command '{command}' failed for user {user_id} after {duration:.3f}s: {e}")
            raise
    
    return wrapper

def performance_monitor(endpoint: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def decorator(func: Callable):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.time()
            
            try:
                result = await func(*args, **kwargs)
                
                duration = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if duration > 5.0:
                    logger.warning(f"Slow operation: {endpoint} took {duration:.3f}s")
                elif duration > 2.0:
                    logger.info(f"Operation: {endpoint} took {duration:.3f}s")
                
                return result
                
            except Exception as e:
                duration = time.time() - start_time
                logger.error(f"Operation failed: {endpoint} after {duration:.3f}s: {e}")
                raise
        
        return wrapper
    return decorator

def cache_result(ttl: int = 300):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    ttl: –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    def decorator(func: Callable):
        cache = {}
        
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            cache_key = str(args) + str(sorted(kwargs.items()))
            now = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in cache:
                result, timestamp = cache[cache_key]
                if now - timestamp < ttl:
                    logger.debug(f"Cache hit for {func.__name__}")
                    return result
                else:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                    del cache[cache_key]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache[cache_key] = (result, now)
            logger.debug(f"Cached result for {func.__name__}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(cache) > 100:
                # –£–¥–∞–ª—è–µ–º 20 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                oldest_keys = sorted(
                    cache.keys(),
                    key=lambda k: cache[k][1]
                )[:20]
                for key in oldest_keys:
                    del cache[key]
            
            return result
        
        return wrapper
    return decorator

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
def telegram_handler(func: Callable) -> Callable:
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    –í–∫–ª—é—á–∞–µ—Ç: rate limiting, error handling, logging
    """
    return log_command(handle_errors(rate_limit(func)))

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ (–±–µ–∑ rate limiting)
def fast_telegram_handler(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ (–±–µ–∑ rate limiting)
    –í–∫–ª—é—á–∞–µ—Ç: error handling, logging
    """
    return log_command(handle_errors(func))

def typing_action(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç" """
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        return await func(update, context, *args, **kwargs)
    
    return wrapper