from telegram import Update
from telegram.ext import ContextTypes
import pandas as pd
import logging
from typing import Optional

from data.optimized_moex_client import optimized_moex_client
from analysis.indicators import calculate_money_ad
from bot.utils.decorators import telegram_handler, typing_action, performance_monitor

logger = logging.getLogger(__name__)

@telegram_handler
@typing_action 
@performance_monitor("calculate_single_delta")
async def calculate_single_delta(update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str, days: int):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–ª—å—Ç—É –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏
    –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ main.py
    """
    await update.message.reply_text(f"üîç –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–µ–ª—å—Ç—É –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è {ticker} –∑–∞ {days} –¥–Ω–µ–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º
        df = optimized_moex_client.get_daily_data(ticker, days=100)
        if df.empty or len(df) < days + 1:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")
            return

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        df = df.rename(columns={'close': 'close', 'volume': 'volume'})
        
        # –í—ã—á–∏—Å–ª—è–µ–º Money A/D –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        df = calculate_money_ad(df)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É A/D Line
        ad_start = df['money_ad'].iloc[-(days+1)]
        ad_end = df['money_ad'].iloc[-1]
        ad_delta = ad_end - ad_start

        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º
        price_start = df['close'].iloc[-(days+1)]
        price_end = df['close'].iloc[-1]
        date_start = df.index[-(days+1)].strftime('%d.%m.%y')
        date_end = df.index[-1].strftime('%d.%m.%y')
        
        price_delta = price_end - price_start
        price_pct = 100 * price_delta / price_start

        # üí∞ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç –∑–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 10 –¥–Ω–µ–π (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞)
        filter_turnover_series = df['volume'].iloc[-10:] * df['close'].iloc[-10:]
        filter_avg_turnover = filter_turnover_series.mean()
        
        # üí∞ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±–æ—Ä–æ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
        turnover_series = df['volume'].iloc[-days:] * df['close'].iloc[-days:]
        avg_turnover = turnover_series.mean()

        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–æ—Ä–æ—Ç
        today_volume = df['volume'].iloc[-1]
        today_close = df['close'].iloc[-1]
        today_turnover = today_volume * today_close
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –æ–±—ä—ë–º–∞
        ratio = today_turnover / avg_turnover if avg_turnover > 0 else 0

        # EMA20/EMA50 Daily
        df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()
        df['EMA50'] = df['close'].ewm(span=50, adjust=False).mean()
        
        current_ema20 = df['EMA20'].iloc[-1]
        current_ema50 = df['EMA50'].iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ª–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ EMA20x50
        ema20x50_long = (current_ema20 > current_ema50) and (current_price > current_ema20)

        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–∞ EMA20x50
        ema20x50_short = (current_ema20 < current_ema50) and (current_price < current_ema20)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å
        price_change_day = (current_price / df['close'].iloc[-2] - 1) if len(df) > 1 else 0

        # SMA30 Weekly
        try:
            wdf = optimized_moex_client.get_weekly_data(ticker, weeks=80)  # –ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª—å –¥–ª—è SMA30
            if len(wdf) >= 30:
                wdf['SMA30'] = wdf['close'].rolling(window=30).mean()
                weekly_sma30 = wdf['SMA30'].iloc[-1]
                weekly_price = wdf['close'].iloc[-1]
                price_above_sma30 = weekly_price > weekly_sma30 if pd.notna(weekly_sma30) else False
            else:
                price_above_sma30 = False
        except:
            price_above_sma30 = False
        
        # üìä –û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–µ–ª—å—Ç—ã –ø–æ—Ç–æ–∫–∞ –∫ –æ–±–æ—Ä–æ—Ç—É (%)
        if avg_turnover != 0:
            delta_pct = 100 * ad_delta / avg_turnover
        else:
            delta_pct = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = f"üìä –ê–Ω–∞–ª–∏–∑ –¥–µ–ª—å—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è {ticker}\n"
        msg += f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_start} ‚Äì {date_end} ({days} –¥–Ω–µ–π)\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ–±–æ—Ä–æ—Ç–µ
        if filter_avg_turnover < 50_000_000:
            msg += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç (< 50 –º–ª–Ω ‚ÇΩ)\n\n"

        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        if ema20x50_long:
            ema_icon = "üü¢"
            ema_label = "–õ–æ–Ω–≥"
        elif ema20x50_short:
            ema_icon = "üî¥"
            ema_label = "–®–æ—Ä—Ç"
        else:
            ema_icon = "‚ö´"
            ema_label = "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"

        sma_icon = "üü¢" if price_above_sma30 else "üî¥"
        flow_icon = "üü¢" if ad_delta > 0 else "üî¥"
        
        msg += "<pre>\n"
        msg += f"{'–¢–∏–∫–µ—Ä':<6} {'Œî –¶–µ–Ω—ã':<9} {flow_icon}{'Œî –ü–æ—Ç–æ–∫–∞':>11} {'Œî / –û–±–æ—Ä–æ—Ç':>8} {'Œî –¶–µ–Ω—ã 1D':>8} {'–û–±—ä—ë–º':>8} {'ema20—Ö50':>7} {'sma30':>4}\n"
        msg += f"{ticker:<6} {price_pct:5.1f}% {ad_delta/1_000_000:11,.0f} –º–ª–Ω ‚ÇΩ {delta_pct:8.1f}%  {price_change_day*100:>8.1f}%  {ratio:>6.1f}x {ema_icon:>5} {sma_icon:>4}\n"
        msg += "</pre>\n"
        
        msg += f"üí∞ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±–æ—Ä–æ—Ç: {avg_turnover/1_000_000:.1f} –º–ª–Ω ‚ÇΩ\n"
        
        await update.message.reply_text(msg, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error calculating delta for {ticker}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–µ–ª—å—Ç—ã –¥–ª—è {ticker}: {str(e)}")

class DeltaAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–ª—å—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    
    def __init__(self):
        self.min_turnover = 50_000_000  # 50 –º–ª–Ω —Ä—É–±
    
    def calculate_delta_metrics(self, ticker: str, days: int) -> Optional[dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–µ–ª—å—Ç—ã –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = optimized_moex_client.get_daily_data(ticker, days=100)
            if df.empty or len(df) < days + 1:
                return None

            # –í—ã—á–∏—Å–ª—è–µ–º Money A/D
            df = calculate_money_ad(df)

            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            ad_start = df['money_ad'].iloc[-(days+1)]
            ad_end = df['money_ad'].iloc[-1]
            ad_delta = ad_end - ad_start

            price_start = df['close'].iloc[-(days+1)]
            price_end = df['close'].iloc[-1]
            price_pct = 100 * (price_end - price_start) / price_start

            # –û–±–æ—Ä–æ—Ç
            turnover_series = df['volume'].iloc[-days:] * df['close'].iloc[-days:]
            avg_turnover = turnover_series.mean()
            
            filter_turnover_series = df['volume'].iloc[-10:] * df['close'].iloc[-10:]
            filter_avg_turnover = filter_turnover_series.mean()

            # EMA —Å–∏–≥–Ω–∞–ª—ã
            df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()
            df['EMA50'] = df['close'].ewm(span=50, adjust=False).mean()
            
            current_ema20 = df['EMA20'].iloc[-1]
            current_ema50 = df['EMA50'].iloc[-1]
            current_price = df['close'].iloc[-1]
            
            ema20x50_long = (current_ema20 > current_ema50) and (current_price > current_ema20)
            ema20x50_short = (current_ema20 < current_ema50) and (current_price < current_ema20)

            # Weekly SMA30
            try:
                wdf = optimized_moex_client.get_weekly_data(ticker, weeks=80)
                if len(wdf) >= 30:
                    wdf['SMA30'] = wdf['close'].rolling(window=30).mean()
                    weekly_sma30 = wdf['SMA30'].iloc[-1]
                    weekly_price = wdf['close'].iloc[-1]
                    price_above_sma30 = weekly_price > weekly_sma30 if pd.notna(weekly_sma30) else False
                else:
                    price_above_sma30 = False
            except:
                price_above_sma30 = False

            return {
                'ticker': ticker,
                'days': days,
                'ad_delta': ad_delta,
                'ad_delta_millions': ad_delta / 1_000_000,
                'price_change_pct': price_pct,
                'avg_turnover': avg_turnover,
                'avg_turnover_millions': avg_turnover / 1_000_000,
                'filter_avg_turnover': filter_avg_turnover,
                'low_turnover': filter_avg_turnover < self.min_turnover,
                'delta_to_turnover_pct': 100 * ad_delta / avg_turnover if avg_turnover > 0 else 0,
                'ema20x50_long': ema20x50_long,
                'ema20x50_short': ema20x50_short,
                'price_above_sma30_weekly': price_above_sma30,
                'current_price': current_price,
                'date_start': df.index[-(days+1)].strftime('%d.%m.%y'),
                'date_end': df.index[-1].strftime('%d.%m.%y')
            }

        except Exception as e:
            logger.error(f"Error calculating delta metrics for {ticker}: {e}")
            return None

    def scan_delta_opportunities(self, tickers: list, days: int = 10) -> list:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–µ–ª—å—Ç–µ
        """
        opportunities = []
        
        for ticker in tickers:
            try:
                metrics = self.calculate_delta_metrics(ticker, days)
                if metrics and not metrics['low_turnover']:
                    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if (metrics['ad_delta'] > 0 and  # –ü—Ä–∏—Ç–æ–∫ –¥–µ–Ω–µ–≥
                        metrics['ema20x50_long'] and  # –õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª EMA
                        metrics['price_above_sma30_weekly']):  # –¶–µ–Ω–∞ –≤—ã—à–µ SMA30 weekly
                        
                        opportunities.append(metrics)
                        
            except Exception as e:
                logger.warning(f"Error scanning {ticker}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (–¥–µ–ª—å—Ç–∞ –∫ –æ–±–æ—Ä–æ—Ç—É)
        opportunities.sort(key=lambda x: x['delta_to_turnover_pct'], reverse=True)
        
        return opportunities

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
delta_analyzer = DeltaAnalyzer()