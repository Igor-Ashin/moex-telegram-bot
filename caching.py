# caching.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø

import time
import os
from datetime import datetime
import pandas as pd
import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
#CACHE_TTL = int(os.getenv("CACHE_TTL", "300"))  # 5 –º–∏–Ω—É—Ç
#WEEKLY_CACHE_TTL = int(os.getenv("WEEKLY_CACHE_TTL", "600"))  # 10 –º–∏–Ω—É—Ç
#MAX_CACHE_ENTRIES = int(os.getenv("MAX_CACHE_ENTRIES", "1000"))
ENABLE_CACHING = os.getenv("ENABLE_CACHING", "true").lower() == "true"

CACHE_FILE = "figi_cache.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏
#moex_cache = {}
#weekly_cache = {}
figi_cache = {}

#def get_cache_key(ticker, days):
#    return f"moex_{ticker}_{days}"

#def is_cache_valid(cache_entry, ttl_seconds):
#    return time.time() - cache_entry['timestamp'] < ttl_seconds

#def cleanup_cache():
#    –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
#    current_time = time.time()
"""    
    # –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞
    keys_to_remove = []
    for key, entry in list(moex_cache.items()):
        if current_time - entry['timestamp'] > CACHE_TTL * 2:
            keys_to_remove.append(key)
    
    for key in keys_to_remove:
        del moex_cache[key]
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    keys_to_remove = []
    for key, entry in list(weekly_cache.items()):
        if current_time - entry['timestamp'] > WEEKLY_CACHE_TTL * 2:
            keys_to_remove.append(key)
    
    for key in keys_to_remove:
        del weekly_cache[key]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–µ–π
    if len(moex_cache) > MAX_CACHE_ENTRIES:
        sorted_items = sorted(moex_cache.items(), key=lambda x: x[1]['timestamp'])
        for key, _ in sorted_items[:10]:
            del moex_cache[key]

"""

def load_figi_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global figi_cache
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                figi_cache = json.load(f)
            print("‚úÖ figi_cache –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ figi_cache: {e}")
            figi_cache = {}
    else:
        print("‚ÑπÔ∏è –§–∞–π–ª figi_cache.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∫—ç—à")


def save_figi_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º figi_cache –≤ —Ñ–∞–π–ª"""
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(figi_cache, f, ensure_ascii=False, indent=2)
        print("üíæ figi_cache —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è figi_cache: {e}")


def activate_caching_if_enabled():
    ENABLE_CACHING = os.getenv("ENABLE_CACHING", "true").lower() == "true"
    print(f"üîç ENABLE_CACHING = {ENABLE_CACHING}")

    if not ENABLE_CACHING:
        print("‚ÑπÔ∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False

    # –í–ö–õ–Æ–ß–ê–ï–ú –ö–≠–®
    success = enable_caching()
    return success


"""
def get_moex_data_with_cache(ticker="SBER", days=120):
   # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_moex_data
    cache_key = get_cache_key(ticker, days)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in moex_cache:
        cache_entry = moex_cache[cache_key]
        if is_cache_valid(cache_entry, CACHE_TTL):
            print(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞")
            return cache_entry['data']
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –∏–∑ MOEX API")
    try:
        till = datetime.today().strftime('%Y-%m-%d')
        from_date = (datetime.today() - pd.Timedelta(days=days * 1.5)).strftime('%Y-%m-%d')
        url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json?interval=24&from={from_date}&till={till}"
        
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        candles = data['candles']['data']
        columns = data['candles']['columns']
        
        df = pd.DataFrame(candles, columns=columns)
        df['begin'] = pd.to_datetime(df['begin'])
        df = df.sort_values('begin')
        df.set_index('begin', inplace=True)
        df = df.rename(columns={
            'close': 'close',
            'volume': 'volume',
            'high': 'high',
            'low': 'low'
        })
        df = df[['close', 'volume', 'high', 'low']].dropna()
        result = df.tail(days)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        moex_cache[cache_key] = {
            'data': result,
            'timestamp': time.time()
        }
        
        cleanup_cache()
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
        return pd.DataFrame()
"""
"""
def get_moex_weekly_data_with_cache(ticker="SBER", weeks=80):
    #–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_moex_weekly_data
    cache_key = f"weekly_{ticker}_{weeks}"
    
    if cache_key in weekly_cache:
        cache_entry = weekly_cache[cache_key]
        if is_cache_valid(cache_entry, WEEKLY_CACHE_TTL):
            print(f"üìã –ù–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞")
            return cache_entry['data']
    
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –∏–∑ MOEX API")
    try:
        till = datetime.today().strftime('%Y-%m-%d')
        from_date = (datetime.today() - pd.Timedelta(weeks=weeks * 1.5)).strftime('%Y-%m-%d')
        url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json?interval=7&from={from_date}&till={till}"
        
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        candles = data['candles']['data']
        columns = data['candles']['columns']
        
        df = pd.DataFrame(candles, columns=columns)
        df['begin'] = pd.to_datetime(df['begin'])
        df = df.sort_values('begin')
        df.set_index('begin', inplace=True)
        df = df.rename(columns={'close': 'close'})
        df = df[['close']].dropna()
        result = df.tail(weeks)
        
        weekly_cache[cache_key] = {
            'data': result,
            'timestamp': time.time()
        }
        
        cleanup_cache()
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
        return pd.DataFrame()
"""
def get_figi_by_ticker_with_cache(ticker: str) -> str | None:
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_figi_by_ticker
    if ticker in figi_cache:
        print(f"üìã FIGI –¥–ª—è {ticker} –≤–∑—è—Ç –∏–∑ –∫—ç—à–∞")
        return figi_cache[ticker]
    
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º FIGI –¥–ª—è {ticker} –∏–∑ Tinkoff API")
    try:
        from tinkoff.invest import Client
        TINKOFF_API_TOKEN = os.getenv("TINKOFF_API_TOKEN")
        
        with Client(TINKOFF_API_TOKEN) as client:
            instruments = client.instruments.shares().instruments
            for instr in instruments:
                if instr.ticker == ticker:
                    figi_cache[ticker] = instr.figi
                    save_figi_cache()   # ‚Üê üü¢ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
                    return instr.figi
        
        print(f"FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {ticker} –≤ TQBR")
        figi_cache[ticker] = None
        save_figi_cache()   # ‚Üê üü¢ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –¥—ë—Ä–≥–∞—Ç—å API
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ FIGI –¥–ª—è {ticker}: {e}")
        return None

def get_cache_stats():
    #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    import sys
    
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∫—ç—à–∞:")
   # print(f"   moex_cache: {len(moex_cache)} –∑–∞–ø–∏—Å–µ–π")
   # print(f"   weekly_cache: {len(weekly_cache)} –∑–∞–ø–∏—Å–µ–π") 
    print(f"   figi_cache: {len(figi_cache)} –∑–∞–ø–∏—Å–µ–π")
    
   # moex_size = sys.getsizeof(moex_cache) / 1024 / 1024
   # weekly_size = sys.getsizeof(weekly_cache) / 1024 / 1024
    figi_size = sys.getsizeof(figi_cache) / 1024 / 1024
    
    return {
      #  'moex_entries': len(moex_cache),
      #  'weekly_entries': len(weekly_cache),
        'figi_entries': len(figi_cache),
        'total_size_mb': round(figi_size, 2),
        'entries': len(figi_cache),
        'size_mb': round(figi_size, 2)
    }


def enable_caching():
    #–í–∫–ª—é—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        import sys
        time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ main
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å main —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if '__main__' in sys.modules:
            main_module = sys.modules['__main__']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
            """
            if hasattr(main_module, 'get_moex_data'):
                print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º get_moex_data –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
                main_module._original_get_moex_data = main_module.get_moex_data
                main_module.get_moex_data = get_moex_data_with_cache
                
            if hasattr(main_module, 'get_moex_weekly_data'):
                print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º get_moex_weekly_data –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
                main_module._original_get_moex_weekly_data = main_module.get_moex_weekly_data
                main_module.get_moex_weekly_data = get_moex_weekly_data_with_cache
            """    
            if hasattr(main_module, 'get_figi_by_ticker'):
                print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º get_figi_by_ticker –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
                main_module._original_get_figi_by_ticker = main_module.get_figi_by_ticker
                main_module.get_figi_by_ticker = get_figi_by_ticker_with_cache
            
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—å __main__ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def print_cache_stats():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ figi_cache"""
    figi_size = sys.getsizeof(figi_cache) / 1024 / 1024
    print(f"‚ÑπÔ∏è figi_cache: {len(figi_cache)} –∑–∞–ø–∏—Å–µ–π, {figi_size:.2f} MB")


# –ó–∞–≥—Ä—É–∂–∞–µ–º figi_cache –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_figi_cache()

# –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# if ENABLE_CACHING:
#     enable_caching()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

